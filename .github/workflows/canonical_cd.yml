name: Build and Push Connectors

on:
  pull_request:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Install Airbyte CI
        id: install-airbyte-ci
        uses: ./.github/actions/install-airbyte-ci
        with:
          airbyte_ci_binary_url: ${{ inputs.airbyte_ci_binary_url }}
          is_fork: ${{ inputs.is_fork }}

      - name: Detect changed connectors
        id: detect-changes
        run: |
          BASE_COMMIT=$(git merge-base origin/master HEAD)
          echo "Base commit: $BASE_COMMIT"
          echo "GITHUB_SHA: $GITHUB_SHA"
          
          # Detect changed connectors
          CHANGED_DIRS=$(git diff --name-only $BASE_COMMIT $GITHUB_SHA | grep '^airbyte-integrations/connectors/' | cut -d/ -f3 | sort -u || true)

          if [[ -z "$CHANGED_DIRS" ]]; then
            echo "No changed connectors detected."
            echo "CONNECTORS_LIST=" >> $GITHUB_ENV
          else
            echo "Changed connectors: $CHANGED_DIRS"
            echo "CONNECTORS_LIST=$CHANGED_DIRS" >> $GITHUB_ENV
          fi
          
      - name: Build and push Docker images
        id: build-and-push-images
        run: |
          if [[ -z "$CONNECTORS_LIST" ]]; then
            echo "No changed connectors to build. Exiting."
            exit 0
          fi

          for CONNECTOR in $CONNECTORS_LIST; do
            if [ -d "airbyte-integrations/connectors/$CONNECTOR" ]; then
              METADATAFILE="airbyte-integrations/connectors/$CONNECTOR/metadata.yaml"

              # Extract metadata
              VERSION=$(grep 'dockerImageTag' $METADATAFILE | cut -d':' -f2 | tr -d '" ')
              NAME=$(grep 'dockerRepository' $METADATAFILE | cut -d':' -f2 | tr -d '" ')
              IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$NAME:$VERSION"

              echo "üöÄ Building $CONNECTOR with airbyte-ci..."
              cd airbyte-integrations/connectors/$CONNECTOR
              
              echo "üöÄ Setting up proxy configuration for $CONNECTOR..."

              cat <<EOF > build_customization.py
              from __future__ import annotations

              import os
              from typing import TYPE_CHECKING

              if TYPE_CHECKING:
                  from dagger import Container

              async def post_connector_install(base_image_container: Container) -> Container:
                  """
                  This function will run before the connector installation.
                  This function sets PROXY environment variables of the docker image.
                  The value for Proxy variables may change depending on the environment(staging or prod),
                  so we read its value from environment.
                  """
                  HTTP_PROXY = os.environ["IMAGE_HTTP_PROXY"]
                  HTTPS_PROXY = os.environ["IMAGE_HTTPS_PROXY"]

                  return await base_image_container.with_env_variable("HTTP_PROXY", HTTP_PROXY).with_env_variable("HTTPS_PROXY", HTTPS_PROXY)
              EOF

              echo "‚úÖ build_customization.py created successfully."

              # Set proxy environment variables
              export IMAGE_HTTP_PROXY=http://squid.internal:3128
              export IMAGE_HTTPS_PROXY=http://squid.internal:3128

              # Build image using airbyte-ci
              airbyte-ci connectors --name=$CONNECTOR build
              
              # Ensure the dev-tagged image exists before pushing
              DEV_IMAGE="airbyte/$CONNECTOR:dev"
              if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "$DEV_IMAGE"; then
                echo "‚úÖ Found built image: $DEV_IMAGE"
                docker tag "$DEV_IMAGE" "$IMAGE_NAME"
                docker push "$IMAGE_NAME"
              else
                echo "‚ùå Error: Image $DEV_IMAGE was not found after build."
                exit 1
              fi

              cd ../../../
            else
              echo "‚ö†Ô∏è Warning: Connector directory airbyte-integrations/connectors/$CONNECTOR not found!"
            fi
          done
