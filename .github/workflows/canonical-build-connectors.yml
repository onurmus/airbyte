name: Build Connectors

on:
  push:
    branches:
      - master
      - develop
      - staging

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Determine changed directories
        id: changes
        run: |
          echo "Checking for changes..."
          CHANGED_DIRS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | cut -d/ -f1 | sort -u)
          echo "Changed directories: $CHANGED_DIRS"
          echo "::set-output name=dirs::$CHANGED_DIRS"

      - name: Set environment name
        id: env
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [ "$BRANCH_NAME" == "main" ]; then
            ENV_NAME="prod"
          else
            ENV_NAME="$BRANCH_NAME"
          fi
          echo "::set-output name=env_name::$ENV_NAME"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHRC_TOKEN }}

      - name: Get version number for image
        id: version
        run: |
          for DIR in ${{ steps.changes.outputs.dirs }}; do
            if [ -d "$DIR" ]; then
              # Extract the current version from the Dockerfile
              CURRENT_VERSION=$(grep 'LABEL io.airbyte.version=' $DIR/Dockerfile | cut -d'=' -f2 | tr -d '"')
              
              echo "New version for $DIR: $CURRENT_VERSION"
              echo "::set-output name=${DIR}_version::$CURRENT_VERSION"
            fi
          done

      - name: Build and push Docker images
        run: |
          for DIR in ${{ steps.changes.outputs.dirs }}; do
            if [ -d "$DIR" ]; then
              VERSION=${{ steps.version.outputs.${DIR}_version }}
              IMAGE_NAME="ghcr.io/onurmus/${DIR}:${VERSION}"
              ENV_IMAGE_NAME="ghcr.io/onurmus/${DIR}:${{ steps.env.outputs.env_name }}"

              echo "Building Docker image for $DIR with version $VERSION..."
              docker build -t $IMAGE_NAME -t $ENV_IMAGE_NAME $DIR
              docker push $IMAGE_NAME
              docker push $ENV_IMAGE_NAME
            fi
          done

      - name: Cleanup Docker images
        run: docker system prune -f
