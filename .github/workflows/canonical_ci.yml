name: Canonical CI

on:
  pull_request:

jobs:
  fail_on_protected_path_changes:
    name: "Check fork do not change protected paths "
    if: github.event.pull_request.head.repo.fork == true
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
      - name: Check for changes in protected paths
        id: check_for_changes_in_protected_paths
        uses: dorny/paths-filter@v2
        with:
          filters: |
            protected_paths:
              - 'airbyte-ci/**'
      - name: Fail if changes in protected paths
        if: steps.check_for_changes_in_protected_paths.outputs.protected_paths == 'true'
        run: |
          echo "The fork has changes in protected paths. This is not allowed."
          exit 1
  check_connector_version:
    name: Check connector version
    if: github.event.pull_request.head.repo.fork == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changed connectors
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BASE_COMMIT=$(git rev-parse HEAD~5)
          elif [ "${{ github.event_name }}" = "push" ]; then
            BASE_COMMIT=${{ github.event.before }}
          else
            BASE_COMMIT=${{ github.event.pull_request.base.sha }}
          fi
          echo "BASE_COMMIT=$BASE_COMMIT"
          CHANGED_DIRS=$(git diff --name-only $BASE_COMMIT $GITHUB_SHA | grep '^airbyte-integrations/connectors/' | cut -d/ -f3 | sort -u)
          echo "Changed connector directories: $CHANGED_DIRS"
          echo "CONNECTORS_LIST=$CHANGED_DIRS" >> $GITHUB_ENV
          echo "BASE_COMMIT=$BASE_COMMIT" >> $GITHUB_ENV

      - name: Check connector version
        id: version-check
        run: |
          for DIR in $CONNECTORS_LIST; do
            if [ -d "airbyte-integrations/connectors/$DIR" ]; then
              METADATAFILE="airbyte-integrations/connectors/$DIR/metadata.yaml"
              echo "METADATAFILE=$METADATAFILE"
              NEW_VERSION=$(grep 'dockerImageTag' $METADATAFILE | cut -d':' -f2 | tr -d '" ')
              echo "BASE_COMMIT=$BASE_COMMIT"
              git checkout $BASE_COMMIT
              BASE_VERSION=$(grep 'dockerImageTag' $METADATAFILE | cut -d':' -f2 | tr -d '" ')
              # Switch back to the current commit
              git checkout $GITHUB_SHA
              echo "NEW_VERSION=$NEW_VERSION"
              echo "BASE_VERSION=$BASE_VERSION"
              if [ "$NEW_VERSION" == "$BASE_VERSION" ]; then
                echo "Error: Connector version has not changed in $METADATAFILE. Please check dockerImageTag."
                exit 1
              fi
              echo "Connector version has changed for $DIR: $BASE_VERSION -> $NEW_VERSION"
            fi
          done

  connectors_full_ci:
    name: Run connectors full CI on fork
    if: github.event.pull_request.head.repo.fork == true
    needs: fail_on_protected_path_changes
    runs-on: ubuntu-22.04
    # env:
    #   MAIN_BRANCH_NAME: "master"

    steps:
      # This checkouts a fork which can contain untrusted code
      # It's deemed safe as the community-ci environment requires manual reviewer approval to run
      - name: Checkout full history of fork
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.head_ref }} # This ensures the PR branch is checked out
          fetch-depth: 0 # Fetch full history, avoids detached HEAD state
          fetch-tags: true # Ensure tags are fetched as well
          submodules: true # If your project has submodules, this ensures they are fetched

      - name: Install Airbyte CI
        id: install-airbyte-ci
        uses: ./.github/actions/install-airbyte-ci
        with:
          airbyte_ci_binary_url: ${{ inputs.airbyte_ci_binary_url }}
          is_fork: ${{ inputs.is_fork }}

      - name: Detect changed connectors
        id: detect-changes
        env:
          CI_GIT_BRANCH: ${{ github.head_ref }}
          CI_GIT_REPO_URL: ${{ github.event.pull_request.head.repo.clone_url }}
          CI_GIT_REVISION: ${{ github.event.pull_request.head.sha || github.sha }}
          HEAD_REPO: ${{ github.event.pull_request.head.repo.full_name }}
          HEAD_REF: ${{ github.event.pull_request.head.sha }}
        run: |
          # Determine base commit
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BASE_COMMIT=$(git rev-parse HEAD~5)
          elif [ "${{ github.event_name }}" = "push" ]; then
            BASE_COMMIT=${{ github.event.before }}
          else
            BASE_COMMIT=${{ github.event.pull_request.base.sha }}
          fi

          echo "BASE_COMMIT=$BASE_COMMIT"
          echo "GITHUB_SHA=$GITHUB_SHA"
          git status

          echo "branch: $CI_GIT_BRANCH"
          echo "repo: $CI_GIT_REPO_URL"
          echo "revision: $CI_GIT_REVISION"
          echo "revision: $HEAD_REPO"
          echo "revision: $HEAD_REF"

          # Detect changed connectors
          CHANGED_DIRS=$(git diff --name-only $BASE_COMMIT $GITHUB_SHA | grep '^airbyte-integrations/connectors/' | cut -d/ -f3 | sort -u)
          echo "Changed connectors: $CHANGED_DIRS"

          # Store the changed connectors in environment variable
          echo "CONNECTORS_LIST=$CHANGED_DIRS" >> $GITHUB_ENV

      - name: Detect changed connectors
        id: detect-changes
        env:
          CI_GIT_BRANCH: ${{ github.head_ref }}
        run: |
          # Ensure we have the latest commits from the PR branch
          git fetch origin "$CI_GIT_BRANCH" --depth=50

          # Ensure we have the exact commit referenced by GITHUB_SHA
          git fetch origin "$GITHUB_SHA" --depth=1 || echo "‚ö†Ô∏è Warning: Could not fetch GITHUB_SHA, assuming it exists."

          # Determine base commit
          if [ "${{ github.event_name }}" = "push" ]; then
            BASE_COMMIT=${{ github.event.before }}
          else
            BASE_COMMIT=${{ github.event.pull_request.base.sha }}
          fi

          echo "BASE_COMMIT=$BASE_COMMIT"
          echo "GITHUB_SHA=$GITHUB_SHA"

          # Ensure both commits exist in history
          git log -n 3 --oneline

          # Detect changed connectors
          CHANGED_DIRS=$(git diff --name-only "$BASE_COMMIT" "$GITHUB_SHA" | grep '^airbyte-integrations/connectors/' | cut -d/ -f3 | sort -u || true)

          if [[ -z "$CHANGED_DIRS" ]]; then
            echo "‚ö†Ô∏è No changed connectors detected. Check if GITHUB_SHA is valid."
          else
            echo "Changed connectors: $CHANGED_DIRS"
          fi

          # Store the changed connectors in environment variable
          echo "CONNECTORS_LIST=$CHANGED_DIRS" >> $GITHUB_ENV

      - name: Test Changed Connectors
        id: test-airbyte-ci
        env:
          CI_GIT_BRANCH: ${{ github.head_ref }}
          CI_GIT_REPO_URL: ${{ github.event.pull_request.head.repo.clone_url }}
          CI_GIT_REVISION: ${{ github.event.pull_request.head.sha || github.sha }}
          HEAD_REPO: ${{ github.event.pull_request.head.repo.full_name }}
          HEAD_REF: ${{ github.event.pull_request.head.sha }}
        run: |
          sudo apt update
          sudo apt install python3-setuptools -y
          pip install --upgrade setuptools
          echo "Status before checkout"
          git status
          git checkout $CI_GIT_BRANCH

          echo "branch: $CI_GIT_BRANCH"
          echo "repo: $CI_GIT_REPO_URL"
          echo "revision: $CI_GIT_REVISION"
          echo "revision: $HEAD_REPO"
          echo "revision: $HEAD_REF"
          echo "Status after checkout"
          git status

          for CONNECTOR in $CONNECTORS_LIST; do
            echo "üîÑ Running tests for connector: $CONNECTOR"
            cd airbyte-integrations/connectors/$CONNECTOR

            airbyte-ci --disable-update-check --disable-dagger-run connectors --name=$CONNECTOR test \
                --skip-step=qa_checks --skip-step=version_inc_check --skip-step=acceptance --skip-step=python_cli_validation

            cd ../../../
            # Find the latest timestamped report directory inside the CI branch folder
            REPORT_DIR=$(find airbyte-ci/connectors/pipelines/pipeline_reports/airbyte-ci/connectors/test/manual/"$CI_GIT_BRANCH" -mindepth 1 -maxdepth 1 -type d | sort | tail -n 1)
            echo "Report dir is $REPORT_DIR"

            if [[ -z "$REPORT_DIR" ]]; then
                echo "‚ùå Error: No report directory found for branch $CI_GIT_BRANCH."
                exit 1
            fi

            # Find the latest commit hash directory inside the timestamped directory
            COMMIT_DIR=$(find "$REPORT_DIR" -mindepth 1 -maxdepth 1 -type d | sort | tail -n 1)

            if [[ -z "$COMMIT_DIR" ]]; then
                echo "‚ùå Error: No commit directory found inside $REPORT_DIR."
                exit 1
            fi
            echo "Commit dir is $COMMIT_DIR"

            # Extract connector name dynamically from the JSON file if available
            OUTPUT_JSON=$(find "$COMMIT_DIR" -mindepth 3 -maxdepth 3 -type f -name "output.json" | head -n 1)

            if [[ ! -f "$OUTPUT_JSON" ]]; then
                echo "‚ö†Ô∏è Warning: Test report JSON not found in $COMMIT_DIR, failing build to be safe."
                ls $COMMIT_DIR
                exit 1
            fi

            # Extracting the connector name dynamically
            CONNECTOR_NAME=$(jq -r '.connector_technical_name' "$OUTPUT_JSON")

            # Extract the success field and failed steps
            SUCCESS=$(jq -r '.success' "$OUTPUT_JSON")
            FAILED_STEPS=$(jq -r '.failed_steps[]' "$OUTPUT_JSON")

            if [[ "$SUCCESS" == "false" ]]; then
                echo "‚ùå Connector tests failed for $CONNECTOR_NAME."
                echo "üö® Failed steps: $FAILED_STEPS"
                exit 1
            else
                echo "‚úÖ All connector tests passed for $CONNECTOR_NAME!"
            fi
          done
